document.addEventListener('DOMContentLoaded', () => {
    // Initialize EventSource for real-time notifications
    const notificationSource = new EventSource('/events'); // Replace with your server's notification endpoint

    // Handle incoming notifications
    notificationSource.addEventListener('notification', (event) => {
        const notification = JSON.parse(event.data);
        displayNotification(notification);
    });

    // Handle connection errors
    notificationSource.onerror = () => {
        console.error('Failed to connect to notification server.');
    };

    // Display a notification using your design
    function displayNotification(notification) {
        const container = document.getElementById('toast-container');

        // Show the container if it's hidden
        container.style.display = 'block';

        // Create the toast element
        const toast = document.createElement('div');
        toast.className = 'toast ancient-toast align-items-center show mb-2'; // Apply your design classes
        toast.role = 'alert';
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');

        // Add toast content using your design
        toast.innerHTML = `
            <div class="toast-header">
                <i class="ri-notification-3-fill toast-icon"></i>
                <strong class="me-auto text-truncate" style="max-width: 200px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                    ${notification.title || 'Notification'}
                </strong>
                <small class="toast-time">${'Just now'}</small>
                <button type="button" class="btn-close toast-close" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${notification.content || 'You have a new notification.'}
            </div>
        `;

        // Add close button functionality
        toast.querySelector('.btn-close').addEventListener('click', () => {
            toast.remove();
            if (container.childElementCount === 0) {
                container.style.display = 'none'; // Hide container if no toasts remain
            }
        });

        // Append the toast to the container
        container.appendChild(toast);

        // Automatically remove the toast after 5 seconds
        setTimeout(() => {
            toast.remove();
            if (container.childElementCount === 0) {
                container.style.display = 'none'; // Hide container if no toasts remain
            }
        }, 5000);
    }
});
